max_list
counter=0
max_list<-c()
for (i in 1:length(col_index_seq2)){
for (j in 1:length(col_index_seq1)){
counter=counter+1
if ((i==1)&(j==1)){
max_list[counter]<-alignment_matrix[i,j]
}
else if (((i==1)& (j!=1)) || ((i!=1)&(j==1))){
penalty_amt<-abs(abs(j-i)-1)
penalty<- open_gap_penalty + (extension_penalty*penalty_amt)
which_one<-c(penalty)
max_list[counter]<-max(which_one)
}
else {
penalty_amt<-abs(abs(j-i)-1)
penalty<-open_gap_penalty + (extension_penalty*penalty_amt)
#print(penalty)
diagonal_before=alignment_matrix[i-1,j-1]
current_score=alignment_matrix[i,j]
one_to_left<-alignment_matrix[i,j-1]-penalty
one_above<-alignment_matrix[i-1,j]-penalty
which_one<-c((diagonal_before+current_score),one_above,one_to_left)
max_list[counter]<-max(which_one)
#print(i)
#print(j)
alignment_matrix[i,j-1]
print(which_one)
}
}
}
max_list
counter=0
max_list<-c()
for (i in 1:length(col_index_seq2)){
for (j in 1:length(col_index_seq1)){
counter=counter+1
if ((i==1)&(j==1)){
max_list[counter]<-alignment_matrix[i,j]
}
else if (((i==1)& (j!=1)) || ((i!=1)&(j==1))){
penalty_amt<-abs(abs(j-i)-1)
penalty<- open_gap_penalty + (extension_penalty*penalty_amt)
which_one<-c(penalty)
max_list[counter]<-max(which_one)
}
else {
penalty_amt<-abs(abs(j-i)-1)
penalty<-open_gap_penalty + (extension_penalty*penalty_amt)
#print(penalty)
diagonal_before=alignment_matrix[i-1,j-1]
current_score=alignment_matrix[i,j]
one_to_left<-alignment_matrix[i,j-1]-penalty
one_above<-alignment_matrix[i-1,j]-penalty
which_one<-c((diagonal_before+current_score),one_above,one_to_left)
max_list[counter]<-max(which_one)
#print(i)
#print(j)
print(alignment_matrix[i,j-1])
print(which_one)
}
}
}
max_list
counter=0
max_list<-c()
for (i in 1:length(col_index_seq2)){
for (j in 1:length(col_index_seq1)){
counter=counter+1
if ((i==1)&(j==1)){
max_list[counter]<-alignment_matrix[i,j]
}
else if (((i==1)& (j!=1)) || ((i!=1)&(j==1))){
penalty_amt<-abs(abs(j-i)-1)
penalty<- open_gap_penalty + (extension_penalty*penalty_amt)
which_one<-c(penalty)
max_list[counter]<-max(which_one)
}
else {
penalty_amt<-abs(abs(j-i)-1)
penalty<-open_gap_penalty + (extension_penalty*penalty_amt)
#print(penalty)
diagonal_before=alignment_matrix[i-1,j-1]
current_score=alignment_matrix[i,j]
one_to_left<-alignment_matrix[i,j-1]+penalty
one_above<-alignment_matrix[i-1,j]+penalty
which_one<-c((diagonal_before+current_score),one_above,one_to_left)
max_list[counter]<-max(which_one)
#print(i)
#print(j)
print(alignment_matrix[i,j-1])
print(which_one)
}
}
}
max_list
matrix(max_list, nrow = length(col_index_seq2), ncol=length(col_index_seq1),byrow=TRUE)
counter=0
max_list<-c()
for (i in 1:length(col_index_seq2)){
for (j in 1:length(col_index_seq1)){
counter=counter+1
if ((i==1)&(j==1)){
max_list[counter]<-alignment_matrix[i,j]
}
else if (((i==1)& (j!=1)) || ((i!=1)&(j==1))){
penalty_amt<-abs(abs(j-i)-1)
penalty<- open_gap_penalty + (extension_penalty*penalty_amt)
which_one<-c(penalty)
max_list[counter]<-max(which_one)
}
else {
penalty_amt<-abs(abs(j-i)-1)
penalty<-open_gap_penalty + (extension_penalty*penalty_amt)
print(penalty)
diagonal_before=alignment_matrix[i-1,j-1]
current_score=alignment_matrix[i,j]
one_to_left<-alignment_matrix[i,j-1]+penalty
one_above<-alignment_matrix[i-1,j]+penalty
which_one<-c((diagonal_before+current_score),one_above,one_to_left)
max_list[counter]<-max(which_one)
#print(i)
#print(j)
print(alignment_matrix[i,j-1])
print(which_one)
}
}
}
max_list
matrix(max_list, nrow = length(col_index_seq2), ncol=length(col_index_seq1),byrow=TRUE)
knitr::opts_chunk$set(echo = TRUE)
data(BLOSUM45)
pa5 <- pairwiseAlignment(pattern, subject,
substitutionMatrix=BLOSUM45,
gapOpening=6, gapExtension=0.5)
library(Biostrings)
######################################################################################
pattern <- c("ALIGNME")
subject <- c("AILMENT")
pattern <- unlist(AAStringSet(pattern))
subject <- unlist(AAStringSet(subject))
pattern  # original pattern
subject  # original subject
data(BLOSUM62)
pa5 <- pairwiseAlignment(pattern, subject,
substitutionMatrix=BLOSUM62,
gapOpening=6, gapExtension=0.5)
pa5
writePairwiseAlignments(pa5, Matrix="BLOSUM62")
#######################################################################################
data(BLOSUM45)
pa5 <- pairwiseAlignment(pattern, subject,
substitutionMatrix=BLOSUM45,
gapOpening=6, gapExtension=0.5)
pa5
writePairwiseAlignments(pa5, Matrix="BLOSUM45")
counter=0
library(Biostrings)
data("BLOSUM62")
columns<-colnames(BLOSUM62)
rows<-rownames(BLOSUM62)
read_in_data<-function(string1){
testing_seq<-c(string1)
y<-testing_seq[1]
sequence<-substring(y,seq(1,nchar(y),1),seq(1,nchar(y),1))
return(sequence)
}
sequence1<-read_in_data("GRQTAGL")
sequence1
sequence2<-read_in_data("GTAYDL")
sequence2
get_index_in_BLOSUM62<-function(sequence){
col_index_seq1=c("25")
for (i in 1:length(sequence)){
col_index_seq1[i+1] <- which(columns==sequence[i])
}
return(col_index_seq1)
}
col_index_seq1<-get_index_in_BLOSUM62(sequence1)
col_index_seq2<-get_index_in_BLOSUM62(sequence2)
#setting the first row and first column of the row to -8 and setting the alignment to 0 for *,*
BLOSUM62[,25]<-as.numeric("-8")
BLOSUM62[25,]<-as.numeric("-8")
BLOSUM62[25,25]<-as.numeric("0")
#creates a score matrix
get_score_matrix_BLOSUM62<-function(index_vector_1,index_vector_2){
counter=0
alignment_1<-c()
for (i in 1:length(index_vector_1)){
for (j in 1:length(index_vector_2)){
counter=counter+1
#temp<-c(as.numeric(index_vector_1[i]),as.numeric(index_vector_2[j]))
#print(temp)
alignment_1[counter]<-BLOSUM62[as.numeric(index_vector_1[i]),as.numeric(index_vector_2[j])]
}
}
alignment_matrix<-matrix(alignment_1,nrow = length(col_index_seq2), ncol = length(col_index_seq1), byrow=FALSE)
return(alignment_matrix)
}
alignment_matrix<-get_score_matrix_BLOSUM62(col_index_seq1,col_index_seq2)
alignment_matrix
#sets the open gap penalty and the extension penalty
open_gap_penalty=(-8)
counter=0
max_list<-c()
for (i in 1:length(col_index_seq2)){
for (j in 1:length(col_index_seq1)){
counter=counter+1
if ((i==1)&(j==1)){
max_list[counter]<-alignment_matrix[i,j]
}
else if (((i==1)& (j!=1)) || ((i!=1)&(j==1))){
penalty_amt<-abs(abs(j-i)-1)
penalty<- open_gap_penalty + (extension_penalty*penalty_amt)
which_one<-c(penalty)
max_list[counter]<-max(which_one)
}
else {
penalty_amt<-abs(abs(j-i)-1)
penalty<-open_gap_penalty + (extension_penalty*penalty_amt)
print(penalty)
diagonal_before=alignment_matrix[i-1,j-1]
current_score=alignment_matrix[i,j]
one_to_left<-alignment_matrix[i,j-1]+penalty
one_above<-alignment_matrix[i-1,j]+penalty
which_one<-c((diagonal_before+current_score),one_above,one_to_left)
max_list[counter]<-max(which_one)
#print(i)
#print(j)
print(alignment_matrix[i,j-1])
print(which_one)
}
}
}
#sets the open gap penalty and the extension penalty
open_gap_penalty=(-8)
counter=0
max_list<-c()
for (i in 1:length(col_index_seq2)){
for (j in 1:length(col_index_seq1)){
counter=counter+1
if ((i==1)&(j==1)){
max_list[counter]<-alignment_matrix[i,j]
}
else if (((i==1)& (j!=1)) || ((i!=1)&(j==1))){
#penalty_amt<-abs(abs(j-i)-1)
#penalty<- open_gap_penalty + (extension_penalty*penalty_amt)
penalty<-open_gap_penalty
which_one<-c(penalty)
max_list[counter]<-max(which_one)
}
else {
#penalty_amt<-abs(abs(j-i)-1)
#penalty<-open_gap_penalty + (extension_penalty*penalty_amt)
#print(penalty)
penalty<-open_gap_penalty
diagonal_before=alignment_matrix[i-1,j-1]
current_score=alignment_matrix[i,j]
one_to_left<-alignment_matrix[i,j-1]+penalty
one_above<-alignment_matrix[i-1,j]+penalty
which_one<-c((diagonal_before+current_score),one_above,one_to_left)
max_list[counter]<-max(which_one)
#print(i)
#print(j)
print(alignment_matrix[i,j-1])
print(which_one)
}
}
}
max_list
matrix(max_list, nrow = length(col_index_seq2), ncol=length(col_index_seq1),byrow=TRUE)
#sets the open gap penalty and the extension penalty
open_gap_penalty=(8)
counter=0
max_list<-c()
for (i in 1:length(col_index_seq2)){
for (j in 1:length(col_index_seq1)){
counter=counter+1
if ((i==1)&(j==1)){
max_list[counter]<-alignment_matrix[i,j]
}
else if (((i==1)& (j!=1)) || ((i!=1)&(j==1))){
#penalty_amt<-abs(abs(j-i)-1)
#penalty<- open_gap_penalty + (extension_penalty*penalty_amt)
penalty<-open_gap_penalty
which_one<-c(penalty)
max_list[counter]<-max(which_one)
}
else {
#penalty_amt<-abs(abs(j-i)-1)
#penalty<-open_gap_penalty + (extension_penalty*penalty_amt)
#print(penalty)
penalty<-open_gap_penalty
diagonal_before=alignment_matrix[i-1,j-1]
current_score=alignment_matrix[i,j]
one_to_left<-alignment_matrix[i,j-1]+penalty
one_above<-alignment_matrix[i-1,j]+penalty
which_one<-c((diagonal_before+current_score),one_above,one_to_left)
max_list[counter]<-max(which_one)
#print(i)
#print(j)
print(alignment_matrix[i,j-1])
print(which_one)
}
}
}
max_list
matrix(max_list, nrow = length(col_index_seq2), ncol=length(col_index_seq1),byrow=TRUE)
#sets the open gap penalty and the extension penalty
open_gap_penalty=(-8)
counter=0
max_list<-c()
for (i in 1:length(col_index_seq2)){
for (j in 1:length(col_index_seq1)){
counter=counter+1
if ((i==1)&(j==1)){
max_list[counter]<-alignment_matrix[i,j]
}
else if (((i==1)& (j!=1)) || ((i!=1)&(j==1))){
#penalty_amt<-abs(abs(j-i)-1)
#penalty<- open_gap_penalty + (extension_penalty*penalty_amt)
penalty<-open_gap_penalty
which_one<-c(penalty)
max_list[counter]<-max(which_one)
}
else {
#penalty_amt<-abs(abs(j-i)-1)
#penalty<-open_gap_penalty + (extension_penalty*penalty_amt)
#print(penalty)
penalty<-open_gap_penalty
diagonal_before=alignment_matrix[i-1,j-1]
current_score=alignment_matrix[i,j]
one_to_left<-alignment_matrix[i,j-1]+penalty
one_above<-alignment_matrix[i-1,j]+penalty
which_one<-c((diagonal_before+current_score),one_above,one_to_left)
max_list[counter]<-max(which_one)
#print(i)
#print(j)
print(alignment_matrix[i,j-1])
print(which_one)
}
}
}
max_list
matrix(max_list, nrow = length(col_index_seq2), ncol=length(col_index_seq1),byrow=TRUE)
alignment_matrix<-get_score_matrix_BLOSUM62(col_index_seq1,col_index_seq2)
alignment_matrix
counter=0
max_list<-c()
for (i in 1:length(col_index_seq2)){
for (j in 1:length(col_index_seq1)){
counter=counter+1
if ((i==1)&(j==1)){
max_list[counter]<-alignment_matrix[i,j]
}
else if (((i==1)& (j!=1)) || ((i!=1)&(j==1))){
#penalty_amt<-abs(abs(j-i)-1)
#penalty<- open_gap_penalty + (extension_penalty*penalty_amt)
penalty<-open_gap_penalty
which_one<-c(penalty)
max_list[counter]<-max(which_one)
}
else {
#penalty_amt<-abs(abs(j-i)-1)
#penalty<-open_gap_penalty + (extension_penalty*penalty_amt)
#print(penalty)
penalty<-open_gap_penalty
diagonal_before=alignment_matrix[i-1,j-1]
current_score=alignment_matrix[i,j]
one_to_left<-alignment_matrix[i,j-1]+penalty
one_above<-alignment_matrix[i-1,j]+penalty
which_one<-c((diagonal_before+current_score),one_above,one_to_left)
max_list[counter]<-max(which_one)
#print(i)
#print(j)
print(alignment_matrix[i,j-1])
print(which_one)
}
}
}
max_list
matrix(max_list, nrow = length(col_index_seq2), ncol=length(col_index_seq1),byrow=TRUE)
counter=0
max_list<-c()
for (i in 1:length(col_index_seq2)){
for (j in 1:length(col_index_seq1)){
counter=counter+1
if ((i==1)&(j==1)){
max_list[counter]<-alignment_matrix[i,j]
}
else if (((i==1)& (j!=1)) || ((i!=1)&(j==1))){
#penalty_amt<-abs(abs(j-i)-1)
#penalty<- open_gap_penalty + (extension_penalty*penalty_amt)
penalty<-open_gap_penalty
which_one<-alignment_matrix[i,j-1]-penalty
max_list[counter]<-max(which_one)
}
else {
#penalty_amt<-abs(abs(j-i)-1)
#penalty<-open_gap_penalty + (extension_penalty*penalty_amt)
#print(penalty)
penalty<-open_gap_penalty
diagonal_before=alignment_matrix[i-1,j-1]
current_score=alignment_matrix[i,j]
one_to_left<-alignment_matrix[i,j-1]+penalty
one_above<-alignment_matrix[i-1,j]+penalty
which_one<-c((diagonal_before+current_score),one_above,one_to_left)
max_list[counter]<-max(which_one)
#print(i)
#print(j)
print(alignment_matrix[i,j-1])
print(which_one)
}
}
}
max_list
matrix(max_list, nrow = length(col_index_seq2), ncol=length(col_index_seq1),byrow=TRUE)
counter=0
max_list<-c()
for (i in 1:length(col_index_seq2)){
for (j in 1:length(col_index_seq1)){
counter=counter+1
if ((i==1)&(j==1)){
max_list[counter]<-alignment_matrix[i,j]
}
else if (((i==1)& (j!=1)) || ((i!=1)&(j==1))){
#penalty_amt<-abs(abs(j-i)-1)
#penalty<- open_gap_penalty + (extension_penalty*penalty_amt)
penalty<-open_gap_penalty
which_one<-c(penalty)
max_list[counter]<-max(which_one)
}
else {
#penalty_amt<-abs(abs(j-i)-1)
#penalty<-open_gap_penalty + (extension_penalty*penalty_amt)
#print(penalty)
penalty<-open_gap_penalty
diagonal_before=alignment_matrix[i-1,j-1]
current_score=alignment_matrix[i,j]
one_to_left<-alignment_matrix[i,j-1]+penalty
one_above<-alignment_matrix[i-1,j]+penalty
which_one<-c((diagonal_before+current_score),one_above,one_to_left)
max_list[counter]<-max(which_one)
#print(i)
#print(j)
print(alignment_matrix[i,j-1])
print(which_one)
}
}
}
max_list
matrix(max_list, nrow = length(col_index_seq2), ncol=length(col_index_seq1),byrow=TRUE)
counter=0
max_list<-c()
for (i in 1:length(col_index_seq2)){
for (j in 1:length(col_index_seq1)){
counter=counter+1
if ((i==1)&(j==1)){
max_list[counter]<-alignment_matrix[i,j]
}
else if (((i==1)& (j!=1)) || ((i!=1)&(j==1))){
#penalty_amt<-abs(abs(j-i)-1)
#penalty<- open_gap_penalty + (extension_penalty*penalty_amt)
penalty<-open_gap_penalty
which_one<-c(penalty)
print(which_one)
max_list[counter]<-max(which_one)
}
else {
#penalty_amt<-abs(abs(j-i)-1)
#penalty<-open_gap_penalty + (extension_penalty*penalty_amt)
#print(penalty)
penalty<-open_gap_penalty
diagonal_before=alignment_matrix[i-1,j-1]
current_score=alignment_matrix[i,j]
one_to_left<-alignment_matrix[i,j-1]+penalty
one_above<-alignment_matrix[i-1,j]+penalty
which_one<-c((diagonal_before+current_score),one_above,one_to_left)
max_list[counter]<-max(which_one)
print(which_one)
#print(i)
#print(j)
#print(alignment_matrix[i,j-1])
#print(which_one)
}
}
}
max_list
matrix(max_list, nrow = length(col_index_seq2), ncol=length(col_index_seq1),byrow=TRUE)
knitr::opts_chunk$set(echo = TRUE)
#tree for 3b
library("ape")
install.packages("ape")
#tree for 3b
library("ape")
library("ggplot2")
library("ggtree")
install.packages("ggtree")
#tree for 3b
library("ape")
library("ggplot2")
library("ggtree")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("ggtree", version = "3.8")
#tree for 3b
library("ape")
library("ggplot2")
library("ggtree")
nwk <- system.file("3b_tree.txt", package="ggtree")
tree <- read.tree(nwk)
